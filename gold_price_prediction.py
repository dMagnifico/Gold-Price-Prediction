# -*- coding: utf-8 -*-
"""Gold Price Prediction

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12VOCfXgsCH8lZaM6nCLye-Don28-8YjR

*import dependencies or libraries*
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import sklearn.datasets
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn import metrics
from sklearn.ensemble import RandomForestRegressor

"""Data collection & processing"""

#loading dataset
gold_data = pd.read_csv('/content/gld_price_data.csv')
gold_data.head()

gold_data.tail()

gold_data.shape

gold_data.describe()

gold_data.info()

#  check for missing values
gold_data.isnull().sum()

# Convert the 'Date' column to datetime objects
gold_data['Date'] = pd.to_datetime(gold_data['Date'])

# Extract numerical features for correlation calculation
numerical_data = gold_data.select_dtypes(include=['number'])

# Calculate correlations on numerical data
correlation = numerical_data.corr()
print(correlation)

#create a heatmap from the correlation values
plt.figure(figsize=(8, 6))
sns.heatmap(correlation, annot=True, cmap='Blues', fmt='.1f')
plt.title('Correlation Heatmap')
plt.show()

#correlation values of GLD
print(correlation['GLD'])

# distribution of gold values
sns.distplot(gold_data['GLD'],color='green')

"""Spliting the features and target"""

#drop the date and gold columns
X = gold_data.drop(['Date','GLD'],axis=1)
Y = gold_data['GLD']

print(X)
print(Y)

#split into test and train data
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.2, random_state=2)

print(X_train.shape, X_train.shape, X_test.shape)

"""Model with RandomForestRegressor"""

#loading the model
regressor = RandomForestRegressor(n_estimators=100)

#train the model
regressor.fit(X_train,Y_train)

"""Model Evaluation"""

#Prediction on Test Data
test_golddata_prediction = regressor.predict(X_test)

print(test_golddata_prediction)

#r squared error
r_score = metrics.r2_score(Y_test, test_golddata_prediction)
print("R squared error : ", r_score)

#mean absolute error
m_score = metrics.mean_absolute_error(Y_test, test_golddata_prediction)
print("Mean Absolute Error : ", m_score)

"""Compare actuals and predictions"""

#convert y_test to list
Y_test = list(Y_test)

#compare the actual values and the predicted values in scattered plots in different colors
plt.plot(Y_test, color='blue', label = 'Actual Value')
plt.plot(test_golddata_prediction, color='green', label='Predicted Value')
plt.title('Actual Price vs Predicted Price')
plt.xlabel('Number of values')
plt.ylabel('GLD Price')
plt.legend()
plt.show()

